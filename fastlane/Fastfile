UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
FASTLANE_FOLDER = File.join(PROJECT_ROOT_FOLDER, 'fastlane')
ORIGINAL_RELEASE_NOTES_PATH = File.join(PROJECT_ROOT_FOLDER, 'RELEASE-NOTES.txt')
EXTRACTED_RELEASE_NOTES_PATH = File.join(PROJECT_ROOT_FOLDER, 'metadata', 'release_notes.txt')
PLAY_STORE_STRINGS_PATH = File.join(PROJECT_ROOT_FOLDER, 'metadata', 'PlayStoreStrings.po')

########################################################################
# Environment
########################################################################
fastlane_require 'dotenv'

Dotenv.load('~/.release-toolkit-demo-env.default')
ENV[GHHELPER_REPO = 'wordpress-mobile/release-toolkit-demo']
ENV['PROJECT_ROOT_FOLDER'] = File.dirname(File.expand_path(__dir__)) + '/'
ENV['FL_RELEASE_TOOLKIT_DEFAULT_BRANCH'] = 'trunk'

default_platform(:android)

platform :android do
  desc "Creates a new release branch from the current trunk"
  lane :code_freeze do | options |
    android_codefreeze_prechecks(skip_confirm: options[:skip_confirm])

    android_bump_version_release()
    new_version = android_get_app_version()

    extract_release_notes_for_version(
      version: new_version,
      release_notes_file_path: ORIGINAL_RELEASE_NOTES_PATH,
      extracted_notes_file_path: EXTRACTED_RELEASE_NOTES_PATH
    )
    android_update_release_notes(new_version: new_version)

    setfrozentag(repository: GHHELPER_REPO, milestone: new_version)
  end

  lane :complete_code_freeze do |options|
    code_freeze_version = options[:code_freeze_version]
    release_branch = "release/#{code_freeze_version}"

    android_completecodefreeze_prechecks(skip_confirm: options[:skip_confirm], code_freeze_version: code_freeze_version)

    ensure_git_status_clean
    push_to_git_remote

    setbranchprotection(repository: GHHELPER_REPO, branch: release_branch)

    create_pull_request(
        token: ENV['GITHUB_TOKEN'],
        repo: GHHELPER_REPO,
        title: "Merge #{code_freeze_version} code freeze to trunk",
        head: release_branch,
        base: 'trunk',
        labels: 'Releases',
        reviewers: 'oguzkocer'
    )
  end

  lane :update_appstore_strings do |options|
    ensure_git_status_clean

    version = options.fetch(:version, android_get_app_version)

    files = {
      release_note: EXTRACTED_RELEASE_NOTES_PATH,
    }

    an_update_metadata_source(
      po_file_path: PLAY_STORE_STRINGS_PATH,
      source_files: files,
      release_version: version
    )

    git_add(path: PLAY_STORE_STRINGS_PATH)
    git_commit(
      path: PLAY_STORE_STRINGS_PATH,
      message: "Update `PlayStoreStrings.po` for #{version}",
      allow_nothing_to_commit: true
    )
  end

  # Lanes to trigger Buildkite

  lane :trigger_code_freeze_in_ci do |options|
    buildkite_trigger_build(
      buildkite_organization: 'automattic',
      buildkite_pipeline: 'release-toolkit-demo',
      branch: 'trunk',
      pipeline_file: 'code-freeze.yml',
      message: 'Code Freeze in CI',
      environment: { CODE_FREEZE_VERSION: options[:code_freeze_version] }
    )
  end

  lane :update_appstore_strings_in_ci do |options|
    release_version = options[:version]
    buildkite_trigger_build(
      buildkite_organization: 'automattic',
      buildkite_pipeline: 'release-toolkit-demo',
      branch: "release/#{release_version}",
      pipeline_file: 'update-release-notes.yml',
      message: 'Update release notes'
    )
  end
end

