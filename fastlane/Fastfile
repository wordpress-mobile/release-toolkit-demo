UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
FASTLANE_FOLDER = File.join(PROJECT_ROOT_FOLDER, 'fastlane')
ORIGINAL_RELEASE_NOTES_PATH = File.join(PROJECT_ROOT_FOLDER, 'RELEASE-NOTES.txt')
EXTRACTED_RELEASE_NOTES_PATH = File.join(PROJECT_ROOT_FOLDER, 'metadata', 'release_notes.txt')
PLAY_STORE_STRINGS_PATH = File.join(PROJECT_ROOT_FOLDER, 'metadata', 'PlayStoreStrings.po')

########################################################################
# Environment
########################################################################
fastlane_require 'dotenv'

Dotenv.load('~/.release-toolkit-demo-env.default')
ENV[GHHELPER_REPO = 'wordpress-mobile/release-toolkit-demo']
ENV['PROJECT_ROOT_FOLDER'] = File.dirname(File.expand_path(__dir__)) + '/'
ENV['FL_RELEASE_TOOLKIT_DEFAULT_BRANCH'] = 'trunk'

default_platform(:android)

platform :android do
  desc "Creates a new release branch from the current trunk"
  lane :code_freeze do | options |
    android_codefreeze_prechecks(skip_confirm: options[:skip_confirm])

    android_bump_version_release()
    new_version = android_get_app_version()

    extract_release_notes_for_version(
      version: new_version,
      release_notes_file_path: ORIGINAL_RELEASE_NOTES_PATH,
      extracted_notes_file_path: EXTRACTED_RELEASE_NOTES_PATH
    )
    android_update_release_notes(new_version: new_version)

    setfrozentag(repository: GHHELPER_REPO, milestone: new_version)
  end

  lane :complete_code_freeze do |options|
    android_completecodefreeze_prechecks(skip_confirm: options[:skip_confirm])

    ensure_git_status_clean
    push_to_git_remote

    app_version = android_get_app_version()
    setbranchprotection(repository: GHHELPER_REPO, branch: "release/#{app_version}")

    create_pr('trunk', "Merge #{app_version} code freeze to trunk")
  end

  lane :new_beta_release do | options |
    android_betabuild_prechecks(options)
    android_bump_version_beta()

    app_version = android_get_app_version()
    release_branch = "release/#{app_version}"
    release_version = android_get_release_version()["name"]

    # Create an intermediate branch
    Fastlane::Helper::GitHelper.create_branch("merge/#{release_version}-to-release_#{app-version}")

    create_pr(release_branch, "Merge #{release_version} to #{release_branch}")
  end

  lane :finalize_release do | options |
    UI.user_error!('Please use `finalize_hotfix_release` lane for hotfixes') if android_current_branch_is_hotfix

    android_finalize_prechecks(options)

    app_version = android_get_app_version()
    release_branch = "release/#{app_version}"

    # Remove branch protection first, so that we can push the final commits directly to the release branch
    removebranchprotection(repository:GHHELPER_REPO, branch: release_branch)

    android_bump_version_final_release()

    # Wrap up
    setfrozentag(repository:GHHELPER_REPO, milestone: app_version, freeze: false)
    create_new_milestone(repository:GHHELPER_REPO)
    close_milestone(repository:GHHELPER_REPO, milestone: app_version)

    create_pr('trunk', "Merge #{app_version} final to trunk")
  end

  lane :update_appstore_strings do |options|
    ensure_git_status_clean

    version = options.fetch(:version, android_get_app_version)
    release_branch = "release/#{version}"

    files = {
      release_note: EXTRACTED_RELEASE_NOTES_PATH,
    }

    an_update_metadata_source(
      po_file_path: PLAY_STORE_STRINGS_PATH,
      source_files: files,
      release_version: version
    )

    git_add(path: PLAY_STORE_STRINGS_PATH)
    git_commit(
      path: PLAY_STORE_STRINGS_PATH,
      message: "Update `PlayStoreStrings.po` for #{version}",
      allow_nothing_to_commit: true
    )

    create_pr(release_branch, "Merge #{version} editorialized release notes to #{release_branch}")
  end

  #####################################################################################
  # Triggers for Buildkite
  #####################################################################################
  lane :trigger_code_freeze_in_ci do |options|
    buildkite_trigger_build(
      buildkite_organization: 'automattic',
      buildkite_pipeline: 'release-toolkit-demo',
      branch: 'trunk',
      pipeline_file: 'code-freeze.yml',
      message: 'Code Freeze in CI'
    )
  end

  lane :trigger_complete_code_freeze_in_ci do |options|
    release_version = options[:release_version]
    buildkite_trigger_build(
      buildkite_organization: 'automattic',
      buildkite_pipeline: 'release-toolkit-demo',
      branch: "release/#{release_version}",
      pipeline_file: 'complete-code-freeze.yml',
      message: 'Complete Code Freeze in CI',
      environment: { RELEASE_VERSION: options[:release_version] }
    )
  end

  lane :trigger_finalize_release_in_ci do |options|
    release_version = options[:release_version]
    buildkite_trigger_build(
      buildkite_organization: 'automattic',
      buildkite_pipeline: 'release-toolkit-demo',
      branch: "release/#{release_version}",
      pipeline_file: 'finalize-release.yml',
      message: 'Finalize release',
      environment: { RELEASE_VERSION: options[:release_version] }
    )
  end

  lane :trigger_new_beta_release_in_ci do |options|
    release_version = options[:release_version]
    buildkite_trigger_build(
      buildkite_organization: 'automattic',
      buildkite_pipeline: 'release-toolkit-demo',
      branch: "release/#{release_version}",
      pipeline_file: 'new-beta-release.yml',
      message: 'New beta release',
      environment: { RELEASE_VERSION: options[:release_version] }
    )
  end

  lane :trigger_update_appstore_strings_in_ci do |options|
    release_version = options[:release_version]
    buildkite_trigger_build(
      buildkite_organization: 'automattic',
      buildkite_pipeline: 'release-toolkit-demo',
      branch: "release/#{release_version}",
      pipeline_file: 'update-release-notes.yml',
      message: 'Update release notes',
      environment: { RELEASE_VERSION: options[:release_version] }
    )
  end

  #####################################################################################
  # Utils
  #####################################################################################
  def create_pr(base_branch, title)
    create_pull_request(
        api_token: ENV['GITHUB_TOKEN'],
        repo: GHHELPER_REPO,
        title: title,
        head: Fastlane::Helper::GitHelper.current_git_branch,
        base: base_branch,
        labels: 'Releases',
        reviewers: 'oguzkocer'
    )
  end
end

